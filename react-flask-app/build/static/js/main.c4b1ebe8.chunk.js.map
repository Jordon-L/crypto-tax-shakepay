{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","button","marginRight","spacing","color","background","textTransform","backgroundColor","instructions","marginTop","marginBottom","UserInput","table","useState","selectedFile","setSelectedFile","shakepayWallet","setShakepayWallet","wallet","setWallet","columns","setColumns","data","setData","taxInfo","setTaxInfo","loading","setLoading","error","setError","classes","page","setPage","rowPerPage","setRowsPerPage","length","class","Grid","container","justify","direction","alignItems","style","minHeight","item","xs","Button","className","variant","component","id","type","onChange","event","name","target","files","document","getElementById","innerHTML","hidden","onClick","payload","FormData","append","axios","post","then","res","rows","CreateTable","incomeGain","info","capitalLoss","capitalGain","totalBTC","totalETH","totalCAD","CADSent","CADReceived","avgBTC","avgETH","Upload","Item","value","CircularProgress","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","field","title","TableBody","slice","row","TablePagination","rowsPerPageOptions","count","rowsPerPage","onChangePage","newPage","onChangeRowsPerPage","Container","maxWidth","App","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2ZAoBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAO,CACHC,MAAO,QAEXC,OAAQ,CACJC,YAAaJ,EAAMK,QAAQ,GAC3BC,MAAO,UACPC,WAAY,QACZC,cAAe,aACf,UAAW,CACPC,gBAAiB,UAGzBC,aAAc,CACVC,UAAWX,EAAMK,QAAQ,GACzBO,aAAcZ,EAAMK,QAAQ,QAapC,SAASQ,IAAY,IASbC,EATY,EACwBC,mBAAS,MADjC,mBACTC,EADS,KACKC,EADL,OAE4BF,mBAAS,MAFrC,mBAETG,EAFS,KAEOC,EAFP,OAGYJ,mBAAS,MAHrB,mBAGTK,EAHS,KAGDC,EAHC,OAIcN,mBAAS,IAJvB,mBAITO,EAJS,KAIAC,EAJA,OAKQR,mBAAS,IALjB,mBAKTS,EALS,KAKHC,EALG,OAMcV,mBAAS,IANvB,mBAMTW,EANS,KAMAC,EANA,OAOcZ,oBAAS,GAPvB,mBAOTa,EAPS,KAOAC,EAPA,OAQUd,oBAAS,GARnB,mBAQTe,EARS,KAQFC,EARE,KAWVC,EAAUlC,IAXA,EAYQiB,mBAAS,GAZjB,mBAYTkB,EAZS,KAYHC,GAZG,QAaqBnB,mBAAS,IAb9B,qBAaToB,GAbS,MAaGC,GAbH,MAmIhB,OA3GItB,EADmB,IAAnBQ,EAAQe,QAAgC,IAAhBb,EAAKa,OAE7B,qBAAKC,MAAQ,UAAb,SACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACnC,QAAS,EAAGoC,QAAQ,SAAWC,UAAU,SACrDC,WAAW,SAASC,MAAO,CAAEC,UAAW,SAD5C,UAEI,eAACN,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAf,mCAEI,eAACC,EAAA,EAAD,CACIC,UAAajB,EAAQ7B,OACrB+C,QAAU,YACVC,UAAY,QAHhB,wBAMI,uBACIC,GAAK,YACLC,KAAO,OACPC,SAAU,SAAAC,GA3CtC,IAAyBC,EA4COvC,EAAgBsC,EAAME,OAAOC,MAAM,IA5C1CF,EA6CuBD,EAAME,OAAOC,MAAM,GAAGF,KA5C5CG,SAASC,eAAe,gBAC9BC,UAAY,kBAAoBL,GA6CxBM,QAAM,UAIlB,cAACvB,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAf,SACI,qBAAKK,GAAK,eAAV,+BAEJ,cAACb,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAf,SACI,cAACC,EAAA,EAAD,CAAQC,UAAajB,EAAQ7B,OAAQ+C,QAAQ,YAAY5C,MAAO,UAAUyD,QAAS,kBAuFvG,SAAgB/C,EAAcI,EAAQF,EAAgBK,EAAYE,EAASE,EAAWE,EAAYV,EAAmBY,GACjH,GAAmB,MAAhBf,EACCe,GAAS,GACTF,GAAW,OAEX,CACAE,GAAS,GACTF,GAAW,GACX,IAAMmC,EAAU,IAAIC,SACpBD,EAAQE,OAAO,OAAQlD,GACvBgD,EAAQE,OAAO,SAAU9C,GACzB4C,EAAQE,OAAO,iBAAkBhD,GACjCiD,IAAMC,KAAK,UAAWJ,EAAS,IACxBK,MAAK,SAAAC,IA/JpB,SAAqBC,EAAMjD,EAASC,EAAYE,GAC5CF,EAAWD,GACXG,EAAQ8C,GA8JQC,CAAYF,EAAI9C,KAAKV,MAAOwD,EAAI9C,KAAKF,QAASC,EAAYE,GAC1DE,EAAW,CACP8C,WAAYH,EAAI9C,KAAKkD,KAAKD,WAC1BE,YAAaL,EAAI9C,KAAKkD,KAAKC,YAC3BC,YAAaN,EAAI9C,KAAKkD,KAAKE,YAC3BC,SAAUP,EAAI9C,KAAKkD,KAAKG,SACxBC,SAAUR,EAAI9C,KAAKkD,KAAKI,SACxBC,SAAUT,EAAI9C,KAAKkD,KAAKK,SACxBC,QAASV,EAAI9C,KAAKkD,KAAKM,QACvBC,YAAaX,EAAI9C,KAAKkD,KAAKO,YAC3BC,OAAQZ,EAAI9C,KAAKkD,KAAKQ,OACtBC,OAAQb,EAAI9C,KAAKkD,KAAKS,aAhH+DC,CAAOpE,EAAcI,EAAQF,EAAeK,EAAYE,EAASE,EAAYE,EAAYV,EAAmBY,IAArM,uBAEJ,cAACQ,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAf,SACI,8CAEJ,cAACR,EAAA,EAAD,CAAM8C,MAAI,EAACtC,GAAI,EAAf,SACI,oJAIJ,eAACR,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAf,uCAC8B,uBAAOM,KAAK,OAAOG,KAAK,iBAAiBF,SAAU,SAAAC,GAAK,OAAIpC,EAAkBoC,EAAME,OAAO6B,aAEzH,eAAC/C,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAf,2CACkC,uBAAOM,KAAK,OAAOG,KAAK,SAASF,SAAU,SAACC,GAA0BA,EAAME,OAAO6B,MACjHjE,EAAUkC,EAAME,OAAO6B,aAE3B,eAAC/C,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAf,UACKnB,EAAU,cAAC2D,EAAA,EAAD,IAAuB,GACjCzD,EAAQ,yCAA2C,WAOhE,sBAAKQ,MAAQ,UAAb,UACI,qBAAKc,GAAI,QAAT,SACI,eAACoC,EAAA,EAAD,CAAOvC,UAAajB,EAAQ/B,KAA5B,UACI,cAACwF,EAAA,EAAD,CAAgBxC,UAAajB,EAAQQ,UAArC,SACI,eAACkD,EAAA,EAAD,CAAOC,cAAY,EAACC,aAAa,oBAAjC,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACKxE,EAAQyE,KAAI,SAACC,GAAD,OACT,cAACC,EAAA,EAAD,UACKD,EAAOE,OADMF,EAAOG,cAMrC,cAACC,EAAA,EAAD,UACK5E,EAAK6E,MAAMpE,EAAOE,GAAYF,EAAOE,GAAaA,IAAY4D,KAAI,SAACO,GAChE,OACI,cAACR,EAAA,EAAD,UACKxE,EAAQyE,KAAI,SAACC,GACV,IAAMV,EAAQgB,EAAIN,EAAOG,OACzB,OACI,cAACF,EAAA,EAAD,UACKX,GADaU,EAAOG,sBAWzD,cAACI,EAAA,EAAD,CACIC,mBAAsB,CAAC,GAAG,GAAG,KAC7BrD,UAAY,MACZsD,MAASjF,EAAKa,OACdqE,YAAevE,GACfF,KAAQA,EACR0E,aApGK,SAACpD,EAAOqD,GAC7B1E,GAAQ0E,IAoGQC,oBAjGY,SAACtD,GAC7BnB,IAAgBmB,EAAME,OAAO6B,OAC7BpD,GAAQ,WAmGJ,sBAAKkB,GAAK,MAAV,UACI,8CAAiB1B,EAAQ+C,cACzB,+CAAkB/C,EAAQkD,eAC1B,+CAAkBlD,EAAQiD,eAC1B,8DAAiCjD,EAAQmD,SAAzC,2BAA2EnD,EAAQwD,UACnF,8DAAiCxD,EAAQoD,SAAzC,2BAA2EpD,EAAQyD,OAAnF,OACA,2CAAczD,EAAQsD,QAAtB,OACA,+CAAkBtD,EAAQuD,YAA1B,aAKR,cAAC6B,EAAA,EAAD,CAAWC,SAAU,QAArB,SACKjG,I,IAgDEkG,E,4JAZX,WAEI,OACA,eAACF,EAAA,EAAD,CAAWC,SAAU,QAArB,UACI,iDACA,uEACA,cAAClG,EAAD,W,GARMoG,aC3MHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/C,MAAK,YAAkD,IAA/CgD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjE,SAASC,eAAe,SAM1BsD,M","file":"static/js/main.c4b1ebe8.chunk.js","sourcesContent":["import React, {Component, useState } from 'react'\nimport './App.css'\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n    root : {\n        width: '100%',\n    },\n    button: {\n        marginRight: theme.spacing(1),\n        color: '#F7F7F7',\n        background: 'black',\n        textTransform: 'capitalize',\n        \"&:hover\": {\n            backgroundColor: 'black',\n        }\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n\nfunction CreateTable(rows ,columns, setColumns, setData){\n    setColumns(columns);\n    setData(rows)\n}\nfunction displayFileName(name){\n    var displayLocation = document.getElementById('selectedFile');\n    displayLocation.innerHTML = \"Selected File: \" + name;\n}\nfunction UserInput(){\n    const [selectedFile, setSelectedFile] = useState(null)\n    const [shakepayWallet, setShakepayWallet] = useState(null)\n    const [wallet, setWallet] = useState(null)\n    const [columns, setColumns] = useState([])\n    const [data, setData] = useState([])\n    const [taxInfo, setTaxInfo] = useState({})\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n    let table;\n\n    const classes = useStyles();\n    const [page, setPage] = useState(0);\n    const [rowPerPage, setRowsPerPage] = useState(10);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value); // + in front mean return the numeric representation of object\n        setPage(0);\n    };\n    if (columns.length === 0 && data.length === 0){\n        table =\n        <div class = \"content\">\n            <Grid container spacing={3} justify=\"center\"   direction=\"column\"\n                alignItems=\"center\" style={{ minHeight: '100vh' }}>\n                <Grid item xs={6}>\n                    Shakepay csv file:&nbsp;\n                    <Button\n                        className = {classes.button}\n                        variant = \"contained\"\n                        component = \"label\"\n                    >\n                        Choose File\n                        <input\n                            id = \"fileInput\"\n                            type = \"file\"\n                            onChange={event => {\n                                setSelectedFile(event.target.files[0]);\n                                displayFileName(event.target.files[0].name);\n                            }}\n                            hidden\n                        />\n                    </Button>\n                </Grid>\n                <Grid item xs={6}>\n                    <div id = \"selectedFile\">Selected File: </div>\n                </Grid>\n                <Grid item xs={6}>\n                    <Button className = {classes.button} variant=\"contained\" color= \"primary\" onClick={() => Upload(selectedFile, wallet, shakepayWallet,setColumns, setData, setTaxInfo, setLoading, setShakepayWallet, setError)}>Upload </Button>\n                </Grid>\n                <Grid item xs={6}>\n                    <h4> Optional </h4>\n                </Grid>\n                <Grid Item xs={6}>\n                    <p>\n                        Non-shakepay ethereum data will not be 100% accurate due to limited historical price data available on Coingecko.\n                    </p>\n                </Grid>\n                <Grid item xs={6}>\n                    Shakepay Ethereum Wallet: <input type=\"text\" name=\"shakepayWallet\" onChange={event => setShakepayWallet(event.target.value)} />\n                </Grid>\n                <Grid item xs={6}>\n                    non-Shakepay Ethereum Wallet: <input type=\"text\" name=\"wallet\" onChange={(event) => { const value = event.target.value;\n                    setWallet(event.target.value);}}/>\n                </Grid>\n                <Grid item xs={6}>\n                    {loading ? <CircularProgress /> : \"\"}\n                    {error ? \"Please upload a csv file from shakepay\" : \"\"}\n                </Grid>\n            </Grid>\n        </div>\n    }\n    else{\n        table =\n        <div class = \"content\">\n            <div id =\"table\">\n                <Paper className = {classes.root}>\n                    <TableContainer className = {classes.container}>\n                        <Table stickyHeader aria-label = \"transaction table\">\n                            <TableHead>\n                                <TableRow>\n                                    {columns.map((column) => (\n                                        <TableCell key = {column.title}>\n                                            {column.field}\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {data.slice(page * rowPerPage, page * rowPerPage + rowPerPage).map((row) => {\n                                    return(\n                                        <TableRow>\n                                            {columns.map((column) => {\n                                                const value = row[column.title]\n                                                return (\n                                                    <TableCell key = {column.title}>\n                                                        {value}\n                                                    </TableCell>\n                                                );\n                                            })}\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions = {[10,25,100]}\n                        component = \"div\"\n                        count = {data.length}\n                        rowsPerPage = {rowPerPage}\n                        page = {page}\n                        onChangePage = {handleChangePage}\n                        onChangeRowsPerPage = {handleChangeRowsPerPage}\n                    />\n                </Paper>\n            </div>\n            <div id = \"tax\" >\n                <p>Income Gain: {taxInfo.incomeGain}</p>\n                <p>Capital Gain: {taxInfo.capitalGain}</p>\n                <p>Capital Loss: {taxInfo.capitalLoss}</p>\n                <p>BTC currently in possession: {taxInfo.totalBTC}, Average Cost of BTC:  {taxInfo.avgBTC}</p>\n                <p>ETH currently in possession: {taxInfo.totalETH}, Average Cost of ETH:  {taxInfo.avgETH} </p>\n                <p>CAD sent: {taxInfo.CADSent} </p>\n                <p>CAD Received: {taxInfo.CADReceived} </p>\n            </div>\n        </div>\n    }\n    return (\n        <Container maxWidth= \"false\" >\n            {table}\n        </Container>\n    )\n}\n\nfunction Upload(selectedFile, wallet, shakepayWallet ,setColumns, setData, setTaxInfo,setLoading, setShakepayWallet, setError){\n    if(selectedFile == null){\n        setError(true)\n        setLoading(false)\n    }\n    else{\n        setError(false)\n        setLoading(true)\n        const payload = new FormData()\n        payload.append('file', selectedFile)\n        payload.append('wallet', wallet)\n        payload.append('shakepayWallet', shakepayWallet)\n        axios.post(\"/upload\", payload, {\n            }).then(res => {\n                    CreateTable(res.data.table ,res.data.columns, setColumns, setData)\n                    setTaxInfo({\n                        incomeGain: res.data.info.incomeGain,\n                        capitalLoss: res.data.info.capitalLoss,\n                        capitalGain: res.data.info.capitalGain,\n                        totalBTC: res.data.info.totalBTC,\n                        totalETH: res.data.info.totalETH,\n                        totalCAD: res.data.info.totalCAD,\n                        CADSent: res.data.info.CADSent,\n                        CADReceived: res.data.info.CADReceived,\n                        avgBTC: res.data.info.avgBTC,\n                        avgETH: res.data.info.avgETH})\n                })\n    }\n}\nclass App extends Component {\n\n    render(){\n\n        return (\n        <Container maxWidth= \"false\" >\n            <h1> Crypto Bro Tax</h1>\n            <h3> Ethereum Tax calculator for Shakepay</h3>\n            <UserInput/>\n        </Container>\n    );}\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}