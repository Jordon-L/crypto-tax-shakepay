{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","width","container","maxHeight","UserInput","table","useState","selectedFile","setSelectedFile","wallet","setWallet","columns","setColumns","data","setData","taxInfo","setTaxInfo","loading","setLoading","classes","page","setPage","rowPerPage","setRowsPerPage","length","type","name","onChange","event","target","files","value","class","onClick","payload","FormData","append","axios","post","then","res","rows","CreateTable","incomeGain","info","capitalLoss","capitalGain","totalBTC","totalETH","totalCAD","CADSent","CADReceived","avgBTC","avgETH","Upload","id","Paper","className","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","field","title","TableBody","slice","row","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","onChangePage","newPage","onChangeRowsPerPage","App","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7b5ec19.chunk.js","sourcesContent":["import React, {Component, useState } from 'react'\nimport './App.css'\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n    root : {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 440,\n    },\n});\n\n\nfunction CreateTable(rows ,columns, setColumns, setData){\n    setColumns(columns);\n    setData(rows)\n}\n\nfunction UserInput(){\n    const [selectedFile, setSelectedFile] = useState(null)\n    const [wallet, setWallet] = useState(null)\n    const [columns, setColumns] = useState([])\n    const [data, setData] = useState([])\n    const [taxInfo, setTaxInfo] = useState({})\n    const [loading, setLoading] = useState(false)\n    let table;\n    const classes = useStyles();\n    const [page, setPage] = useState(0);\n    const [rowPerPage, setRowsPerPage] = useState(10);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value) // + in front mean return the numeric representation of object\n        setPage(0);\n    };\n\n    if (columns.length === 0 && data.length === 0){\n        table =\n        <div>\n            <input type=\"file\" name=\"file\" onChange={event => setSelectedFile(event.target.files[0])} />\n            <input type=\"text\" name=\"wallet\" onChange={event => setWallet(event.target.value)}/>\n            <button type=\"button\" class=\"btn btn-success btn-block\" onClick={() => Upload(selectedFile, wallet, setColumns, setData, setTaxInfo, setLoading)}>Upload</button>\n            {loading ? \"Loading...\" : \"\"}\n        </div>\n    }\n    else{\n        table =\n        <div>\n            <div id =\"table\">\n                <Paper className = {classes.root}>\n                    <TableContainer className = {classes.container}>\n                        <Table stickyHeader aria-label = \"transaction table\">\n                            <TableHead>\n                                <TableRow>\n                                    {columns.map((column) => (\n                                        <TableCell key = {column.title}>\n                                            {column.field}\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {data.slice(page * rowPerPage, page * rowPerPage + rowPerPage).map((row) => {\n                                    return(\n                                        <TableRow>\n                                            {columns.map((column) => {\n                                                const value = row[column.title]\n                                                return (\n                                                    <TableCell key = {column.title}>\n                                                        {value}\n                                                    </TableCell>\n                                                );\n                                            })}\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                    <TablePagination\n                        rowsPerPageOptions = {[10,25,100]}\n                        component = \"div\"\n                        count = {data.length}\n                        rowsPerPage = {rowPerPage}\n                        page = {page}\n                        onChangePage = {handleChangePage}\n                        onChangeRowsPerPage = {handleChangeRowsPerPage}\n                    />\n                </Paper>\n            </div>\n            <div id = \"tax\" >\n                <p>Income Gain: {taxInfo.incomeGain}</p>\n                <p>Capital Gain: {taxInfo.capitalGain}</p>\n                <p>Capital Loss: {taxInfo.capitalLoss}</p>\n                <p>BTC currently in possession: {taxInfo.totalBTC}, Average Cost of BTC:  {taxInfo.avgBTC}</p>\n                <p>ETH currently in possession: {taxInfo.totalETH}, Average Cost of ETH:  {taxInfo.avgETH} </p>\n                <p>CAD sent: {taxInfo.CADSent} </p>\n                <p>CAD Received: {taxInfo.CADReceived} </p>\n            </div>\n        </div>\n    }\n    return (\n        <div>\n            {table}\n        </div>\n    )\n}\n\nfunction Upload(selectedFile, wallet, setColumns, setData, setTaxInfo,setLoading){\n    setLoading(true)\n    const payload = new FormData()\n    payload.append('file', selectedFile)\n    payload.append('wallet', wallet)\n    axios.post(\"http://localhost:5000/upload\", payload, {\n        }).then(res => {\n                CreateTable(res.data.table ,res.data.columns, setColumns, setData)\n                setTaxInfo({\n                    incomeGain: res.data.info.incomeGain,\n                    capitalLoss: res.data.info.capitalLoss,\n                    capitalGain: res.data.info.capitalGain,\n                    totalBTC: res.data.info.totalBTC,\n                    totalETH: res.data.info.totalETH,\n                    totalCAD: res.data.info.totalCAD,\n                    CADSent: res.data.info.CADSent,\n                    CADReceived: res.data.info.CADReceived,\n                    avgBTC: res.data.info.avgBTC,\n                    avgETH: res.data.info.avgETH})\n            })\n}\nclass App extends Component {\n\n    render(){\n\n        return (\n        <div>\n            <UserInput/>\n        </div>\n    );}\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}